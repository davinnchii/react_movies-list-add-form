{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","utils/urlValidationPattern.ts","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","validationPattern","TextField","name","value","label","placeholder","required","onChange","useState","Math","random","toFixed","slice","id","touched","setTouched","isValid","trim","test","hasError","htmlFor","type","classNames","event","onBlur","initialMovie","NewMovie","onAdd","count","setCount","setMovie","isEmpty","isPassingValidation","handleChangeFieldValue","target","prev","onSubmit","preventDefault","currentCount","disabled","App","moviesFromServer","setMovies","prevMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3452f5df.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","// eslint-disable-next-line max-len\nexport const validationPattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { validationPattern } from '../../utils/urlValidationPattern';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => {},\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n  const isValid = (value.trim() && (name === 'imgUrl' || name === 'imdbUrl'))\n    ? validationPattern.test(value)\n    : true;\n\n  const hasError = touched && !value.trim() && required;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          name={name}\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError || !isValid,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(event)}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n      {!isValid && (\n        <p className=\"help is-danger\">{`${label} has invalid format`}</p>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\nimport { validationPattern } from '../../utils/urlValidationPattern';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nconst initialMovie = {\n  title: '',\n  description: '',\n  imgUrl: '',\n  imdbUrl: '',\n  imdbId: '',\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const [movie, setMovie] = useState<Movie>(initialMovie);\n\n  const {\n    title,\n    description,\n    imgUrl,\n    imdbUrl,\n    imdbId,\n  } = movie;\n\n  const isEmpty = !title.trim()\n    || !imdbId.trim()\n    || !imdbUrl.trim()\n    || !imgUrl.trim();\n  const isPassingValidation = validationPattern.test(imdbUrl)\n    && validationPattern.test(imgUrl);\n\n  const handleChangeFieldValue = (event:\n  React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n\n    setMovie((prev) => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    onAdd(movie);\n\n    setCount((currentCount) => currentCount + 1);\n    setMovie(initialMovie);\n  };\n\n  return (\n    <form className=\"NewMovie\" key={count} onSubmit={handleSubmit}>\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={handleChangeFieldValue}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={handleChangeFieldValue}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={handleChangeFieldValue}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={handleChangeFieldValue}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={handleChangeFieldValue}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isEmpty || !isPassingValidation}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  const handleAddMovie = (movie: Movie): void => {\n    setMovies((prevMovies: Movie[]) => [...prevMovies, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={handleAddMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}